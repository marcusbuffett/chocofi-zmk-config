/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT_L 0

&lt { quick-tap-ms = <200>; };

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    behaviors {
        tap_repeat_hold_layer: tap_repeat_hold_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_REPEAT_HOLD_LAYER";
            bindings = <&sl>, <&key_repeat>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        tkp_htl: tkp_htl {
            compatible = "zmk,behavior-hold-tap";
            label = "TKP_HTL";
            bindings = <&tog>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    combos {
        compatible = "zmk,combos";

        equals,num_layer {
            bindings = <&kp KP_EQUAL>;
            key-positions = <16 17>;
            layers = <3>;
        };

        multiply_num_layer {
            bindings = <&kp KP_MULTIPLY>;
            key-positions = <18 19>;
            layers = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
  &sl 3  &kp G  &kp P           &kp M      &tkp_htl 5 GLOBE              &kp LG(SPACE)  &kp B  &kp U  &kp LA(BSPC)  &kp BSPC
  &kp D  &kp S  &kp T           &kp R      &kp L                         &kp H          &kp N  &kp E  &kp A         &kp I
  &kp C  &kp V  &kp K           &kp W      &trans                        &trans         &kp F  &kp J  &kp X         &kp Y
                &sk LEFT_SHIFT  &kp SPACE  &tap_repeat_hold_layer 4 0    &sl 1          &kp O  &sl 2
            >;
        };

        Symbols {
            bindings = <
  &kp AT_SIGN        &kp MINUS  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp DOLLAR       &kp TILDE  &kp LESS_THAN  &kp GREATER_THAN  &kp FSLH   &kp ASTERISK
  &kp DOUBLE_QUOTES  &kp SEMI   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp AMPERSAND    &kp GRAVE  &kp DOT        &kp SINGLE_QUOTE  &kp COMMA  &kp COLON
  &kp PERCENT        &kp EQUAL  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PIPE         &kp PLUS   &kp QUESTION   &kp EXCLAMATION   &kp BSLH   &kp CARET
                                &kp UNDERSCORE        &trans                 &to 3            &trans     &trans         &trans
            >;
        };

        sticky_mods {
            bindings = <
  &trans          &trans     &trans        &trans        &trans    &trans                    &trans        &trans        &trans     &trans
  &kp LEFT_SHIFT  &sk LCTRL  &sk LEFT_ALT  &sk LEFT_GUI  &trans    &kp LS(LA(LC(LEFT_GUI)))  &sk LEFT_GUI  &sk LEFT_ALT  &sk LCTRL  &kp LEFT_SHIFT
  &trans          &trans     &trans        &trans        &trans    &trans                    &trans        &trans        &trans     &trans
                             &trans        &trans        &trans    &trans                    &trans        &trans
            >;
        };

        Numbers {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &kp Z    &kp N7  &kp N8  &kp N9  &kp FSLH
  &trans  &trans  &trans  &trans  &trans    &kp DOT  &kp N4  &kp N5  &kp N6  &kp N0
  &trans  &trans  &trans  &trans  &trans    &kp Q    &kp N1  &kp N2  &kp N3  &trans
                  &trans  &trans  &trans    &trans   &trans  &trans
            >;
        };

        Navigation {
            bindings = <
  &trans          &trans    &trans        &trans     &trans    &trans  &kp RET       &kp TAB       &kp Q      &trans
  &kp LEFT_ARROW  &kp DOWN  &kp UP_ARROW  &kp RIGHT  &trans    &trans  &kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT
  &trans          &trans    &trans        &trans     &trans    &trans  &trans        &trans        &trans     &trans
                            &trans        &trans     &trans    &trans  &trans        &trans
            >;
        };

        one_hand {
            bindings = <
  &trans     &kp LC(UP)  &kp LC(DOWN)  &kp LS(LG(KP_NUMBER_4))  &trans       &trans  &trans  &trans  &trans  &trans
  &kp LG(C)  &kp LG(V)   &kp BSPC      &kp TAB                  &trans       &trans  &trans  &trans  &trans  &trans
  &trans     &trans      &trans        &kp LS(LG(M))            &to 0        &trans  &trans  &trans  &trans  &trans
                         &kp LALT      &kp LGUI                 &kp LSHFT    &trans  &trans  &trans
            >;
        };
    };
};
